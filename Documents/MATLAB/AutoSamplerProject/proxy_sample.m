clear
clc

%-------------------Import audio------------------------------------------%
filename = 'Beneath With Me (Full Unofficial Version) HD.mp3';
[Y1,Fs]=audioread(filename);
[Y2,Fs]=audioread(filename);

Original = Y1(20000:40000,1);                       % Extract short mono vector from "Y1" to use as refernece signal.
Sample = Y2(20000:40000,1);                         % Extract short mono vector from "Y1" to use as sample signal.

%-------------------Slice-------------------------------------------------%
Nslice = 10;                                                % Number of samples to extract from "Sample". (A Sample in music production, is understood as being a snippet of sound).
S = Slicer(Sample,Nslice);                                  % Create instance of "Slicer" class using "Sample" as audio and 
G = gradDescent;                                            % Create instance of "gradDescent" class.
getError = @(A) L2_vecNorm(S.mkRender(A)-Original);         % Function to be minimised. "getError" creates the render of the Slicer object using the current shift an coefficient values stored in the Slicer object "S", then uses the L2 vector norm on the element-wise difference between the "S.OutRender" and the "Original" vectors.

%-------------------Aproximate using slices-------------------------------%
step = 500;                                                 % Stepsize to be used in dirfference quotient for gradient descent. "step" must be whole number.
for number = 1:3
    gradient = ceil(abs(G.grad(getError,ceil(abs(step)),[abs(S.getsliceShift),S.getsliceCoeff])));      % Calculate the gradient of the "getError" function at the point X0 = [abs(S.getsliceShift),S.getsliceCoeff]. ciel(abs(step)) ensures that the "step" value passed to G.grad is positive and a whole number.
    plot(S.getOutRender)                                                                                % Plot the vector generated by "S.mkRender" once it was called by "getError".
    S.setsliceShift(S.getsliceShift-step*gradient(1:Nslice));                                           % Descend gradient for "Shift" values.
    S.setsliceCoeff(S.getsliceCoeff-step*gradient((Nslice+1):(2*Nslice)));                              % Descend gradient for "Coeff" values.
end
%-------------------export audio------------------------------------------%

%Outfile = 'mangledFile';
%audiowrite(Outfile,S.getOutRender,Fs)




